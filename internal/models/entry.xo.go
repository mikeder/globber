// Package models contains the types for schema 'blog'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"database/sql"
	"errors"
	"time"
)

// Entry represents a row from 'blog.entries'.
type Entry struct {
	ID        int           `json:"id"`        // id
	AuthorID  int           `json:"author_id"` // author_id
	Slug      string        `json:"slug"`      // slug
	Title     string        `json:"title"`     // title
	Markdown  string        `json:"markdown"`  // markdown
	HTML      string        `json:"html"`      // html
	Published time.Time     `json:"published"` // published
	Updated   time.Time     `json:"updated"`   // updated
	Highlight sql.NullInt64 `json:"highlight"` // highlight

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Entry exists in the database.
func (e *Entry) Exists() bool {
	return e._exists
}

// Deleted provides information if the Entry has been deleted from the database.
func (e *Entry) Deleted() bool {
	return e._deleted
}

// Insert inserts the Entry to the database.
func (e *Entry) Insert(ctx context.Context, db XODB) error {
	var err error

	// if already exist, bail
	if e._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = `INSERT INTO blog.entries (` +
		`author_id, slug, title, markdown, html, published, updated, highlight` +
		`) VALUES (` +
		`?, ?, ?, ?, ?, ?, ?, ?` +
		`)`

	// run query
	XOLog(sqlstr, e.AuthorID, e.Slug, e.Title, e.Markdown, e.HTML, e.Published, e.Updated, e.Highlight)
	res, err := db.ExecContext(ctx, sqlstr, e.AuthorID, e.Slug, e.Title, e.Markdown, e.HTML, e.Published, e.Updated, e.Highlight)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	e.ID = int(id)
	e._exists = true

	return nil
}

// Update updates the Entry in the database.
func (e *Entry) Update(ctx context.Context, db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if e._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = `UPDATE blog.entries SET ` +
		`author_id = ?, slug = ?, title = ?, markdown = ?, html = ?, published = ?, updated = ?, highlight = ?` +
		` WHERE id = ?`

	// run query
	XOLog(sqlstr, e.AuthorID, e.Slug, e.Title, e.Markdown, e.HTML, e.Published, e.Updated, e.Highlight, e.ID)
	_, err = db.ExecContext(ctx, sqlstr, e.AuthorID, e.Slug, e.Title, e.Markdown, e.HTML, e.Published, e.Updated, e.Highlight, e.ID)
	return err
}

// Save saves the Entry to the database.
func (e *Entry) Save(ctx context.Context, db XODB) error {
	if e.Exists() {
		return e.Update(ctx, db)
	}

	return e.Insert(ctx, db)
}

// Delete deletes the Entry from the database.
func (e *Entry) Delete(ctx context.Context, db XODB) error {
	var err error

	// if doesn't exist, bail
	if !e._exists {
		return nil
	}

	// if deleted, bail
	if e._deleted {
		return nil
	}

	// sql query
	const sqlstr = `DELETE FROM blog.entries WHERE id = ?`

	// run query
	XOLog(sqlstr, e.ID)
	_, err = db.ExecContext(ctx, sqlstr, e.ID)
	if err != nil {
		return err
	}

	// set deleted
	e._deleted = true

	return nil
}

// EntryByID retrieves a row from 'blog.entries' as a Entry.
//
// Generated from index 'entries_id_pkey'.
func EntryByID(ctx context.Context, db XODB, id int) (*Entry, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author_id, slug, title, markdown, html, published, updated, highlight ` +
		`FROM blog.entries ` +
		`WHERE id = ?`

	// run query
	XOLog(sqlstr, id)
	e := Entry{
		_exists: true,
	}

	err = db.QueryRowContext(ctx, sqlstr, id).Scan(&e.ID, &e.AuthorID, &e.Slug, &e.Title, &e.Markdown, &e.HTML, &e.Published, &e.Updated, &e.Highlight)
	if err != nil {
		return nil, err
	}

	return &e, nil
}

// EntriesByPublished retrieves a row from 'blog.entries' as a Entry.
//
// Generated from index 'published'.
func EntriesByPublished(ctx context.Context, db XODB, published time.Time) ([]*Entry, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author_id, slug, title, markdown, html, published, updated, highlight ` +
		`FROM blog.entries ` +
		`WHERE published = ?`

	// run query
	XOLog(sqlstr, published)
	q, err := db.QueryContext(ctx, sqlstr, published)
	if err != nil {
		return nil, err
	}
	defer q.Close()

	// load results
	res := []*Entry{}
	for q.Next() {
		e := Entry{
			_exists: true,
		}

		// scan
		err = q.Scan(&e.ID, &e.AuthorID, &e.Slug, &e.Title, &e.Markdown, &e.HTML, &e.Published, &e.Updated, &e.Highlight)
		if err != nil {
			return nil, err
		}

		res = append(res, &e)
	}

	return res, nil
}

// EntryBySlug retrieves a row from 'blog.entries' as a Entry.
//
// Generated from index 'slug'.
func EntryBySlug(ctx context.Context, db XODB, slug string) (*Entry, error) {
	var err error

	// sql query
	const sqlstr = `SELECT ` +
		`id, author_id, slug, title, markdown, html, published, updated, highlight ` +
		`FROM blog.entries ` +
		`WHERE slug = ?`

	// run query
	XOLog(sqlstr, slug)
	e := Entry{
		_exists: true,
	}

	err = db.QueryRowContext(ctx, sqlstr, slug).Scan(&e.ID, &e.AuthorID, &e.Slug, &e.Title, &e.Markdown, &e.HTML, &e.Published, &e.Updated, &e.Highlight)
	if err != nil {
		return nil, err
	}

	return &e, nil
}
