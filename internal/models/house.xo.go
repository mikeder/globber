// Package models contains the types for schema 'blog'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"database/sql"

	"errors"

	"strings"
	"time"
)

// HouseTableHeader is the columns within the blog.houses table.
var HouseTableHeader = []string{
	"id",
	"address",
	"zid",
	"zurl",
	"list_price",
	"sale_price",
	"sold",
	"ctime",
	"mtime",
}

// House represents a row from 'blog.houses'.
type House struct {
	ID        int             `db:"id"`         // id
	Address   string          `db:"address"`    // address
	Zid       int             `db:"zid"`        // zid
	Zurl      string          `db:"zurl"`       // zurl
	ListPrice sql.NullFloat64 `db:"list_price"` // list_price
	SalePrice sql.NullFloat64 `db:"sale_price"` // sale_price
	Sold      bool            `db:"sold"`       // sold
	Ctime     time.Time       `db:"ctime"`      // ctime
	Mtime     time.Time       `db:"mtime"`      // mtime

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the House exists in the database.
func (h *House) Exists() bool {
	return h._exists
}

// Deleted provides information if the House has been deleted from the database.
func (h *House) Deleted() bool {
	return h._deleted
}

// Insert inserts the House to the database.
func (h *House) Insert(ctx context.Context, db XODB) error {
	var err error

	// if already exist, bail
	if h._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = "INSERT INTO blog.houses (" +
		"address, zid, zurl, list_price, sale_price, sold, ctime, mtime" +
		") VALUES (" +
		"?, ?, ?, ?, ?, ?, ?, ?" +
		")"

	// run query
	res, err := db.ExecContext(ctx, sqlstr, h.Address, h.Zid, h.Zurl, h.ListPrice, h.SalePrice, h.Sold, h.Ctime, h.Mtime)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	h.ID = int(id)
	h._exists = true

	return nil
}

// Update updates the House in the database.
func (h *House) Update(ctx context.Context, db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if h._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = "UPDATE blog.houses SET " +
		"address = ?, zid = ?, zurl = ?, list_price = ?, sale_price = ?, sold = ?, ctime = ?, mtime = ?" +
		" WHERE id = ?"

	// run query
	_, err = db.ExecContext(ctx, sqlstr, h.Address, h.Zid, h.Zurl, h.ListPrice, h.SalePrice, h.Sold, h.Ctime, h.Mtime, h.ID)
	return err
}

// Save saves the House to the database.
func (h *House) Save(ctx context.Context, db XODB) error {
	if h.Exists() {
		return h.Update(ctx, db)
	}

	return h.Insert(ctx, db)
}

// Delete deletes the House from the database.
func (h *House) Delete(ctx context.Context, db XODB) error {
	var err error

	// if doesn't exist, bail
	if !h._exists {
		return nil
	}

	// if deleted, bail
	if h._deleted {
		return nil
	}

	// sql query
	const sqlstr = "DELETE FROM blog.houses WHERE id = ?"

	// run query
	_, err = db.ExecContext(ctx, sqlstr, h.ID)
	if err != nil {
		return err
	}

	// set deleted
	h._deleted = true

	return nil
}

func BulkInsertHouses(ctx context.Context, db XODB, hs []*House) error {
	for i := 0; i < len(hs); i += chunkSize {
		end := i + chunkSize
		if end > len(hs) {
			end = len(hs)
		}

		chunk := hs[i:end]

		placeholders := strings.Repeat(", (?, ?, ?, ?, ?, ?, ?, ?)", len(chunk))[2:]

		// sql insert query, primary key provided by autoincrement
		sqlstr := "INSERT INTO blog.houses (address, zid, zurl, list_price, sale_price, sold, ctime, mtime)" +
			"VALUES " +
			placeholders

		var args []interface{}
		for _, h := range chunk {
			args = append(args, h.Address, h.Zid, h.Zurl, h.ListPrice, h.SalePrice, h.Sold, h.Ctime, h.Mtime)
		}

		// run query
		res, err := db.ExecContext(ctx, sqlstr, args...)
		if err != nil {
			return err
		}

		// for bulk inserts, the last insert id will be the id of the first inserted row
		id, err := res.LastInsertId()
		if err != nil {
			return err
		}

		// set primary key and existance
		for _, h := range chunk {
			h.ID = int(id)
			h._exists = true
			id++
		}
	}

	return nil
}

// HouseByAddress retrieves a row from 'blog.houses' as a House.
//
// Generated from index 'address'.
func HouseByAddress(ctx context.Context, db XODB, address string) (*House, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"id, address, zid, zurl, list_price, sale_price, sold, ctime, mtime " +
		"FROM blog.houses " +
		"WHERE address = ?"

	// run query
	h := House{
		_exists: true,
	}

	err = db.QueryRowContext(ctx, sqlstr, address).Scan(&h.ID, &h.Address, &h.Zid, &h.Zurl, &h.ListPrice, &h.SalePrice, &h.Sold, &h.Ctime, &h.Mtime)
	if err != nil {
		return nil, err
	}

	return &h, nil
}

// HouseByID retrieves a row from 'blog.houses' as a House.
//
// Generated from index 'houses_id_pkey'.
func HouseByID(ctx context.Context, db XODB, id int) (*House, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"id, address, zid, zurl, list_price, sale_price, sold, ctime, mtime " +
		"FROM blog.houses " +
		"WHERE id = ?"

	// run query
	h := House{
		_exists: true,
	}

	err = db.QueryRowContext(ctx, sqlstr, id).Scan(&h.ID, &h.Address, &h.Zid, &h.Zurl, &h.ListPrice, &h.SalePrice, &h.Sold, &h.Ctime, &h.Mtime)
	if err != nil {
		return nil, err
	}

	return &h, nil
}
