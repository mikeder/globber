// Package models contains the types for schema 'blog'.
package models

// Code generated by xo. DO NOT EDIT.

import (
	"context"
	"errors"
	"strings"
	"time"
)

// PlayerTableHeader is the columns within the blog.players table.
var PlayerTableHeader = []string{
	"id",
	"name",
	"uuid",
	"first_seen",
	"last_seen",
}

// Player represents a row from 'blog.players'.
type Player struct {
	ID        int       `db:"id"`         // id
	Name      string    `db:"name"`       // name
	UUID      string    `db:"uuid"`       // uuid
	FirstSeen time.Time `db:"first_seen"` // first_seen
	LastSeen  time.Time `db:"last_seen"`  // last_seen

	// xo fields
	_exists, _deleted bool
}

// Exists determines if the Player exists in the database.
func (p *Player) Exists() bool {
	return p._exists
}

// Deleted provides information if the Player has been deleted from the database.
func (p *Player) Deleted() bool {
	return p._deleted
}

// Insert inserts the Player to the database.
func (p *Player) Insert(ctx context.Context, db XODB) error {
	var err error

	// if already exist, bail
	if p._exists {
		return errors.New("insert failed: already exists")
	}

	// sql insert query, primary key provided by autoincrement
	const sqlstr = "INSERT INTO blog.players (" +
		"name, uuid, first_seen, last_seen" +
		") VALUES (" +
		"?, ?, ?, ?" +
		")"

	// run query
	res, err := db.ExecContext(ctx, sqlstr, p.Name, p.UUID, p.FirstSeen, p.LastSeen)
	if err != nil {
		return err
	}

	// retrieve id
	id, err := res.LastInsertId()
	if err != nil {
		return err
	}

	// set primary key and existence
	p.ID = int(id)
	p._exists = true

	return nil
}

// Update updates the Player in the database.
func (p *Player) Update(ctx context.Context, db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return errors.New("update failed: does not exist")
	}

	// if deleted, bail
	if p._deleted {
		return errors.New("update failed: marked for deletion")
	}

	// sql query
	const sqlstr = "UPDATE blog.players SET " +
		"name = ?, uuid = ?, first_seen = ?, last_seen = ?" +
		" WHERE id = ?"

	// run query
	_, err = db.ExecContext(ctx, sqlstr, p.Name, p.UUID, p.FirstSeen, p.LastSeen, p.ID)
	return err
}

// Save saves the Player to the database.
func (p *Player) Save(ctx context.Context, db XODB) error {
	if p.Exists() {
		return p.Update(ctx, db)
	}

	return p.Insert(ctx, db)
}

// Delete deletes the Player from the database.
func (p *Player) Delete(ctx context.Context, db XODB) error {
	var err error

	// if doesn't exist, bail
	if !p._exists {
		return nil
	}

	// if deleted, bail
	if p._deleted {
		return nil
	}

	// sql query
	const sqlstr = "DELETE FROM blog.players WHERE id = ?"

	// run query
	_, err = db.ExecContext(ctx, sqlstr, p.ID)
	if err != nil {
		return err
	}

	// set deleted
	p._deleted = true

	return nil
}

func BulkInsertPlayers(ctx context.Context, db XODB, ps []*Player) error {
	for i := 0; i < len(ps); i += chunkSize {
		end := i + chunkSize
		if end > len(ps) {
			end = len(ps)
		}

		chunk := ps[i:end]

		placeholders := strings.Repeat(", (?, ?, ?, ?)", len(chunk))[2:]

		// sql insert query, primary key provided by autoincrement
		sqlstr := "INSERT INTO blog.players (name, uuid, first_seen, last_seen)" +
			"VALUES " +
			placeholders

		var args []interface{}
		for _, p := range chunk {
			args = append(args, p.Name, p.UUID, p.FirstSeen, p.LastSeen)
		}

		// run query
		res, err := db.ExecContext(ctx, sqlstr, args...)
		if err != nil {
			return err
		}

		// for bulk inserts, the last insert id will be the id of the first inserted row
		id, err := res.LastInsertId()
		if err != nil {
			return err
		}

		// set primary key and existance
		for _, p := range chunk {
			p.ID = int(id)
			p._exists = true
			id++
		}
	}

	return nil
}

// PlayerByID retrieves a row from 'blog.players' as a Player.
//
// Generated from index 'players_id_pkey'.
func PlayerByID(ctx context.Context, db XODB, id int) (*Player, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"id, name, uuid, first_seen, last_seen " +
		"FROM blog.players " +
		"WHERE id = ?"

	// run query
	p := Player{
		_exists: true,
	}

	err = db.QueryRowContext(ctx, sqlstr, id).Scan(&p.ID, &p.Name, &p.UUID, &p.FirstSeen, &p.LastSeen)
	if err != nil {
		return nil, err
	}

	return &p, nil
}

// PlayerByUUID retrieves a row from 'blog.players' as a Player.
//
// Generated from index 'uuid'.
func PlayerByUUID(ctx context.Context, db XODB, uuid string) (*Player, error) {
	var err error

	// sql query
	const sqlstr = "SELECT " +
		"id, name, uuid, first_seen, last_seen " +
		"FROM blog.players " +
		"WHERE uuid = ?"

	// run query
	p := Player{
		_exists: true,
	}

	err = db.QueryRowContext(ctx, sqlstr, uuid).Scan(&p.ID, &p.Name, &p.UUID, &p.FirstSeen, &p.LastSeen)
	if err != nil {
		return nil, err
	}

	return &p, nil
}
